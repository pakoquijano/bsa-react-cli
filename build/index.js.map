{"version":3,"sources":["../src/index.js"],"names":["types","DUCKS","COMPONENT","STATELESS","PATH","CONTAINER","console","log","green","textSync","pjson","require","version","usage","option","parse","process","argv","parseValues","config","counter","forEach","type","length","bold","red","exit","cyan","catch","error","message","then","values","handleValues","component","path","stateless","container","ducks","args","reset"],"mappings":"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","file":"index.js","sourcesContent":["\n// @flow\nimport \"babel-polyfill\";\n\nimport program from 'commander';\nimport co from 'co';\nimport prompt from 'co-prompt';\nimport chalk from 'chalk';\nimport figlet from 'figlet';\nimport shell from 'shelljs';\n\n// local libs\n\nimport createDuck from './ducks/createDuck';\nimport createComponent from './component/createComponent';\nimport constants from './constants';\nimport { create } from \"domain\";\n\nconst types = [\n\tconstants.types.DUCKS,\n\tconstants.types.COMPONENT,\n\tconstants.types.STATELESS,\n\tconstants.types.PATH,\n\tconstants.types.CONTAINER,\n];\nconsole.log(\n\tchalk.green(\n\t\tfiglet.textSync('BSA MyST CLI'),\n\t),\n);\n\nconst pjson = require('../package.json');\n\nprogram\n\t.version(pjson.version)\n\t.usage('with or without arguments :)')\n\t.option('-c, --component [component]', 'name of your Component')\n\t.option('-s, --stateless [stateless]', 'name of your dumb component')\n\t.option('-o, --container [container]', 'name of your container')\n\t.option('-d, --ducks \t [ducks]', 'name of the duck feature')\n\t.option('-p, --path      [path]', 'path for the generated structure [component]')\n\t.parse(process.argv);\n\n\nconst parseValues = co(function *() {\n\tconst config = {};\n\tlet counter = 0;\n\t\n\ttypes.forEach((type) => {\n\t\tconfig[type] = program[type];\n\t\tif (!program[type]) {\n\t\t\tcounter++;\n\t\t}\n\t});\n\t\n\tif (counter === types.length || (counter === types.length - 1 && config[constants.types.PATH])) {\n\t\t// if no arguments or only path provided run prompts\n\t\tconfig[constants.types.COMPONENT] = yield prompt(`Enter the name of ${constants.types.COMPONENT} *: `);\n\t\tif (!config[constants.types.COMPONENT] || '' === config[constants.types.COMPONENT]) {\n\t\t\tconsole.log(chalk.bold.red(`The name is required`));\n\t\t\tprocess.exit(0);\n\t\t}\n\t\tif (!config[constants.types.PATH]) {\n\t\t\tconfig[constants.types.PATH] = yield prompt(chalk.bold.cyan(`Optional path, we recommend to leave blank(will default to /src/[components]):`));\n\t\t}\n\t}\n\t\n\treturn config;\n}).catch((error) => {\n\tconsole.log(chalk.bold.red(error.message));\n\tprocess.exit(0);\n});\n\nparseValues.then((values) => handleValues(values))\n\t\t   .catch((error) => {\n\t\t\t   console.log(chalk.bold.red(error.message));\n\t\t\t   process.exit(0);\n\t\t   });\n\nconst handleValues = ({ component, path, stateless, container, ducks, ...args }) => {\n\tcomponent && createComponent(component, path);\n\tcontainer && createComponent(container, path, false, true);\n\tstateless && createComponent(stateless, path, true);\n\tducks && createDuck(ducks, path);\n\tchalk.reset();\n\t/* optional to run tests \n\tif (shell.exec('npm run test').code !== 0) {\n\t\tshell.echo('Can not run tests. Please run tests manually!');\n\t} */\n\t\n\tconsole.log(chalk.bold.green('Get a cofee and enjoy the time you saved :)!'));\n\tprocess.exit(0);\n};\n"]}